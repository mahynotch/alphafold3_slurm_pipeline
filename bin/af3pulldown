#!/usr/bin/env python3

"""
Script for screening for a list of protein sequences
"""

import argparse
from alphafold3_slurm.wrapper import Alphafold3PullDown


def parsing(args: list = None) -> argparse.Namespace:
    """
    Creates the argument parser instance and applies it to the command line
    input

    Args:
        args (list, optional): List of the arguments to be parsed (only to be
            used for testing). If none is provided, it is taken from sys.argv.
            Defaults to None.

    Returns:
        argparse.Namespace
    """

    parser = argparse.ArgumentParser(
        description=(
            "Takes one or more FASTA files with amino acid sequences, and submits a "
            "job array to ibex to predict the structure of each bait-prey paired sequences."
        )
    )

    parser.add_argument(
        "--job_name",
        help=(
            "Name of the job. This is the name shown in squeue." 
        ),
        default="AF3_pulldown"
    )
    
    parser.add_argument(
        "--make_features",
        help=(
            "Add this flag to only make features for the complex."
        ),
        action="store_true",
    )
    
    parser.add_argument(
        "--make_complex",
        help=(
            "Add this flag to only make complexes from the existing features."
        ),
        action="store_true",
    )
    
    parser.add_argument(
        "--make_both",
        help=(
            "Add this flag to make features and then make complexes. "
            "Note: This would be much slower than running the two separately."
        ),
        action="store_true",
    )

    parser.add_argument(
        "--bait_type",
        help=(
            'Bait type, should be one of "protein", "ligand_ccd", "ligand_smiles", "dna", or "rna"'
        ),
        required=True,
    )

    parser.add_argument(
        "--bait_input",
        help=("Fasta file(s) or CSV file(s) with the bait sequence(s) to model. For format of CSV file, see the README."),
        required=True,
        nargs="+",
    )

    parser.add_argument(
        "--prey_type",
        help=(
            'Prey type, should be one of "protein", "ligand_ccd", "ligand_smiles", "dna", or "rna"'
        ),
        required=True,
    )

    parser.add_argument(
        "--prey_input",
        help=("Fasta file(s) or CSV file(s) with the bait sequence(s) to model. For format of CSV file, see the README."),
        nargs="+",
        required=True,
    )

    parser.add_argument(
        "--destination",
        help=(
            "Path for saving the resulting AlphaFold features. It will create "
            "one subdirectory for each model. Also will contain the sequence files "
            "as they were submitted to ibex, the script that was submitted and the "
            "ibex stdout files."
        ),
        required=True,
    )

    parser.add_argument(
        "--feature_path",
        help=('Directory containing features, should be "destination" of make_feature. '
              'Note: This is for make_complex only. If not specified, the script will look for the features in the destination directory.'),
    )

    parser.add_argument(
        "--time",
        help=("Time in minutes to give to each job. " '(default="300")'),
        type=int,
        default=300,
    )

    parser.add_argument(
        "--mem",
        help=("Memory in GB to allocate to each job. " '(default="64")'),
        type=int,
        default=64,
    )

    parser.add_argument(
        "--mail", help=("Email to send notifications about the " "job progess in ibex.")
    )

    parser.add_argument(
        "--gpu_type",
        help=("Type of GPU, either a100 or v100, default is a100"),
        default="a100",
    )

    parser.add_argument(
        "--max_jobs",
        help=("Maximum number of jobs to submit simultaneously to ibex. Default=1990"),
        type=int,
        default=1990,
    )

    parser.add_argument(
        "--check_only",
        help=(
            "Only check for existing complexes, don't run AlphaFold. "
            "Only check if success without providing in the reason of failure."
        ),
        action="store_true",
    )

    parser.add_argument(
        "--check_only_exact",
        help=(
            "Only check for existing complexes, don't run AlphaFold."
            " Searches for and prints out the error messages in the "
            "ibex stdout files."
        ),
        action="store_true",
    )

    parser.add_argument(
        "--check_stat",
        help=("Prints out the statistics of the job, consists of pLDDT, ipTM, pTM."),
        action="store_true",
    )

    return parser.parse_args(args)

def check_parameter(args):
    """
    Check the parameters for the script

    Args:
        args (argparse.Namespace): The arguments parsed from the command line

    Raises:
        ValueError: If the input parameters are not valid
    """
    if args.make_features + args.make_complex + args.make_both != 1:
        raise ValueError("Exactly one of --make_features, --make_complex, or --make_both must be provided.")
    if args.make_features:
        if args.feature_path is not None:
            raise ValueError("Cannot provide --feature_path with --make_features.")
    if args.make_both:
        if args.feature_path is not None:
            raise ValueError("Cannot provide --feature_path with --make_both.")

if __name__ == "__main__":
    args = parsing()
    check_parameter(args)
    
    job_type = ""
    if args.make_features:
        job_type = "make_features"
    elif args.make_complex:
        job_type = "make_complex"
    else:
        job_type = "both"
        
    af = Alphafold3PullDown(
        args.job_name,
        job_type,
        args.bait_type,
        args.bait_input,
        args.prey_type,
        args.prey_input,
        destination=args.destination,
        feature_path=args.feature_path,
        time_each_protein=args.time,
        memory=args.mem,
        email=args.mail,
        max_jobs=args.max_jobs,
        flag_check=args.check_only,
        flag_detailed=args.check_only_exact,
        flag_stat=args.check_stat,
        gpu_type=args.gpu_type,
    )
    af.run()
