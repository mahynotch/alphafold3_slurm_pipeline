#!/usr/bin/env python3

"""
Script for screening for a list of protein sequences
"""

import argparse
from alphafold3_slurm.wrapper import Alphafold3WrapperMonomer

import logging
logging.getLogger().setLevel(logging.INFO)

def parsing(args: list=None) -> argparse.Namespace:
    """
    Creates the argument parser instance and applies it to the command line
    input

    Args:
        args (list, optional): List of the arguments to be parsed (only to be
            used for testing). If none is provided, it is taken from sys.argv.
            Defaults to None.

    Returns:
        argparse.Namespace
    """

    parser = argparse.ArgumentParser(description=('Takes one or more FASTA '
        'files with amino acid sequences, and submits a '
        'job array to ibex to predict each sequence.'))
    
    parser.add_argument("--input", help=('Fasta file(s) or CSV file(s) with the monomer sequence(s) '
        'to model.'), nargs='+')

    parser.add_argument("--destination", 
        help=('Path for saving the resulting AlphaFold features. It will create '
        'one subdirectory for each model. Also will contain the sequence files ' 
        'as they were submitted to ibex, the script that was submitted and the '
        'ibex stdout files.'), required=True)
    
    parser.add_argument("--time", help=('Time in minutes to give to each job. '
        '(default="300")'), type=int, default=300)

    parser.add_argument("--mem", help=('Memory in GB to allocate to each job. '
        '(default="64")'), type=int, default=64)

    parser.add_argument("--mail", help=('Email to send notifications about the '
                'job progess in ibex.'))
    
    parser.add_argument("--max_jobs",
        help=("Maximum number of jobs to submit simultaneously to ibex. Default=1990"),
        type=int, default=1990)
    
    parser.add_argument("--check_only",
        help=("Only check for existing complexes, don't run AlphaFold. "
              "Only check if success without providing in the reason of failure."), 
        action='store_true')
    
    parser.add_argument("--check_only_exact",
        help=("Only check for existing complexes, don't run AlphaFold."
              " Searches for and prints out the error messages in the "
              "ibex stdout files."),
        action='store_true')
    
    parser.add_argument("--check_stat",
        help=("Prints out the statistics of the job, consists of pLDDT, ipTM, pTM."),
        action='store_true')
 
    return parser.parse_args(args)


if __name__ == '__main__':
    args = parsing()
    af = Alphafold3WrapperMonomer(args.job_name, "make_monomer", args.bait_type, args.bait_input, args.prey_type, args.prey_input, destination = args.destination, time_each_protein=args.time, memory=args.mem,
                                email=args.mail, max_jobs=args.max_jobs, flag_check=args.check_only, flag_detailed=args.check_only_exact, flag_stat=args.check_stat)
    af.run()
    